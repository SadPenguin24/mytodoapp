const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");
const router = express.route();
const asyncHandler = require("express-async-handler");

require("dotenv").config();

const app = express();
const port = process.env.PORT || 5000;

//models
const Schema = mongoose.Schema;

const itemSchema = new Schema(
  {
    itemName: { type: String, required: true },
  },
  {
    timestamps: true,
  }
);
const Item = mongoose.model("Item", itemSchema);


app.use(cors());
app.use(express.json());

//connect mongodb
const uri = process.env.MONGO_URI;
mongoose.connect(uri, {
  useNewUrlParser: true,
  useCreateIndex: true,
  useUnifiedTopology: true,
});
const connection = mongoose.connection;
connection.once("open", () => {
  console.log("MongoDB database connection established successfully");
});

//routes to handle star function
app.post("/lists/:listid/star", function (req, res) {
  const listId = req.params.listid;
  console.log(listId);

  List.findById(listId)
    .then((list) => {
      list.star = true;
      list
        .save()
        .then(() => res.json("Starred"))
        .catch((err) => res.status(400).json("Error: " + err));
    })
    .catch((err) => res.status(400).json("Error: " + err));
});

app.post("/lists/:listid/unstar", function (req, res) {
  const listId = req.params.listid;
  console.log(listId);

  List.findById(listId)
    .then((list) => {
      list.star = false;
      list
        .save()
        .then(() => res.json("unStarred"))
        .catch((err) => res.status(400).json("Error: " + err));
    })
    .catch((err) => res.status(400).json("Error: " + err));
});

app.listen(port, () => {
  console.log(`Server is running on port: ${port}`);
});
